let express,dbConfig,ioConfig,configMiddlewares,cors,https,http,SocketIO,routeCreator,fs,path;_ac0‍.x([["io",()=>io]]);_ac0‍.w("express",[["default",["express"],function(v){express=v}]]);_ac0‍.w("./config/db",[["default",["dbConfig"],function(v){dbConfig=v}]]);_ac0‍.w("./config/ioConfig",[["default",["ioConfig"],function(v){ioConfig=v}]]);_ac0‍.w("./config/middlewares",[["default",["configMiddlewares"],function(v){configMiddlewares=v}]]);_ac0‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_ac0‍.w("https",[["default",["https"],function(v){https=v}]]);_ac0‍.w("http",[["default",["http"],function(v){http=v}]]);_ac0‍.w("socket.io",[["default",["SocketIO"],function(v){SocketIO=v}]]);_ac0‍.w("./lib/index",[["routeCreator",["routeCreator"],function(v){routeCreator=v}]]);_ac0‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_ac0‍.w("path",[["default",["path"],function(v){path=v}]]);












const port = process.env.PORT || 4000
const httpsOptions = {
  cert: fs.readFileSync(path.join(__dirname, 'ssl', 'server.crt')),
  key: fs.readFileSync(path.join(__dirname, 'ssl', 'server.key'))

}
const app = express()
app.disable('x-powered-by')

// add your cors
app.use( cors())

dbConfig(app)
configMiddlewares(app)

app.use(routeCreator())

const server = http.Server(app)
       const io = new SocketIO(server)

ioConfig(io)

// inserts io to each route/to the app params
// const { io } = req.app
app.io = io


server.listen(port, () => console.log(`App listening on port ${port}`))
