class ModuleAlreadyExistsError extends Error {
    constructor() {
        super('Module already exists.');
        Object.setPrototypeOf(this, ModuleAlreadyExistsError.prototype);
        this.name = 'ModuleAlreadyExistsError';
    }
}
class ModuleNotFoundError extends Error {
    constructor() {
        super('Module not found.');
        Object.setPrototypeOf(this, ModuleNotFoundError.prototype);
        this.name = 'ModuleNotFoundError';
    }
}

class ModuleInitializer {
    constructor() {
        this.initFns = new Map();
        this.initPromises = new Map();
        this.modules = new Map();
        this.addModule = (name, initFn) => {
            if (this.initFns.has(name)) {
                throw new ModuleAlreadyExistsError();
            }
            this.loadModulesPromise = undefined;
            this.initFns.set(name, initFn);
        };
        this.getModule = (name) => {
            if (!this.modules.has(name)) {
                throw new ModuleNotFoundError();
            }
            return this.modules.get(name);
        };
        this.hasModule = (name) => this.modules.has(name);
        this.setModule = (name, module) => {
            this.modules.set(name, module);
        };
        this.removeModule = (name) => {
            this.initFns.delete(name);
            this.initPromises.delete(name);
            this.modules.delete(name);
        };
        this.loadModule = (name, ...args) => {
            if (!this.initFns.has(name)) {
                throw new ModuleNotFoundError();
            }
            if (this.initPromises.has(name)) {
                return this.initPromises.get(name);
            }
            const initPromise = this.initFns.get(name)(...args).then(module => {
                this.modules.set(name, module);
                return Promise.resolve();
            });
            this.initPromises.set(name, initPromise);
            return initPromise;
        };
        this.loadModules = (args) => {
            if (this.loadModulesPromise) {
                return this.loadModulesPromise;
            }
            const myArgs = args || {};
            const names = Array.from(this.initFns.keys());
            const loadModules = names.map(name => {
                if (myArgs[name]) {
                    return this.loadModule(name, ...myArgs[name]);
                }
                return this.loadModule(name);
            });
            this.loadModulesPromise = Promise.all(loadModules).then(() => Promise.resolve());
            return this.loadModulesPromise;
        };
    }
}

export { ModuleAlreadyExistsError, ModuleInitializer, ModuleNotFoundError };
